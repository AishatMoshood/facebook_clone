package com.aishatmoshood.weeksixmain.dao.impl;

import com.aishatmoshood.weeksixmain.dao.UserDao;
import com.aishatmoshood.weeksixmain.dto.UserDto;
import com.aishatmoshood.weeksixmain.enums.Gender;
import com.aishatmoshood.weeksixmain.models.Post;
import com.aishatmoshood.weeksixmain.models.User;
import com.aishatmoshood.weeksixmain.util.DatabaseConnection;
import lombok.NonNull;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class UserDaoImpl implements UserDao {
    @Override
    public User signUp(UserDto userDto) {
        final String userInsertSql = "insert into user (first_name, last_name, email, password, dob, gender, date_created) " + "values (?,?,?,?,?,?,?)";

        User savedUser = null;

        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection()) {

            PreparedStatement statement = connection.prepareStatement(userInsertSql, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, userDto.getFirstName());
            statement.setString(2, userDto.getLastName());
            statement.setString(3, userDto.getEmail());
            statement.setString(4, userDto.getPassword());
            statement.setString(5, userDto.getDob());
            statement.setString(6, userDto.getGender());
            statement.setObject(7, userDto.getDate_created());

            int result = statement.executeUpdate();

            final ResultSet keysResultSet = statement.getGeneratedKeys();

            keysResultSet.next();

            final int autogeneratedId = keysResultSet.getInt(1);

            savedUser = result == 1? new User(autogeneratedId,userDto.getFirstName(),userDto.getLastName(),userDto.getEmail(),userDto.getPassword(),userDto.getDob(),userDto.getGender(),userDto.getDate_created()) : null;

            System.out.println("Result: " + result);
            System.out.println("resultSet : " + isUserExist("lawal","ope"));
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return savedUser;
    }

    @Override
    public User isUserExist(String email, String password) {
        User user = null;
        final String SELECT_USER_BY_EMAIL_PASSWORD = "select * from user where email = ? and password = ? ";

        boolean status = false;

       try(Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection(); ){
           PreparedStatement statement = connection.prepareStatement(SELECT_USER_BY_EMAIL_PASSWORD);

           statement.setString(1, email);
           statement.setString(2, password);

       ResultSet rs = statement.executeQuery();
       while (rs.next()) {
           user = new User();
           user.setId(rs.getInt("id"));
           user.setFirstName(rs.getString("first_name"));
           user.setDob(rs.getString("dob"));
       }
      status = rs.next();
       } catch (Exception ex){
           ex.printStackTrace();
       }
       return user;
    }

    public Optional<User> getCustomerById(int userId) {
        return  Optional.empty();
    }

    @Override
    public List<User> getAllUsers() {
        String selectSql = "select * from user";

        List<User> returnData = new ArrayList<>();

        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection()) {

            PreparedStatement statement = connection.prepareStatement("select * from user");

            ResultSet resultSet = statement.executeQuery();
            while(resultSet.next()){
                int id = resultSet.getInt("id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                String email = resultSet.getString("email");
                String password = resultSet.getString("password");
                String dob = resultSet.getString("dob");
                String gender = resultSet.getString("gender");
                LocalDate date_created = resultSet.getDate("date_created").toLocalDate();

            returnData.add( new User(id,firstName,lastName,email,password,dob,gender,date_created));
            }

        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        return returnData;
    }

    @Override
    public User getAUser(User user) {
        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection()) {

            PreparedStatement statement = connection.prepareStatement("select * from user where email = ?");

            statement.setString(1, user.getEmail());

            ResultSet resultSet = statement.executeQuery();

            user.setId(resultSet.getInt(1));

        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        return user;
    }

    public static User getAUserByEmail(String email) {
        User user = new User();
        try (Connection connection = DatabaseConnection.INSTANCE.getDataSource().getConnection()) {

            PreparedStatement statement = connection.prepareStatement("select * from user where email = ?");

            statement.setString(1, email);
         user = (User) statement.executeQuery();

//            user.setId(resultSet.getInt(1));

        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        return user;
    }


}
